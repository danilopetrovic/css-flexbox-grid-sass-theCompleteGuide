da bi slike uzele 100% width ili heigth trebaju da imaju osobinu display: inline-block jer kada su inline uzimaju full size

background url("") center/cover;
filter: grayscale(40%);
width: 100%;
height: 100%;
position: fixed;
z-index: -1;

position vs units:
1) position:fixed - width:100% uzima prostor celov vw jer je fixna pozicija nezavisna od roditelja
2) position:absolute - ancestorContent+padding, uzme sirinu od roditelja+padding koji je relativno pozicioniran (pozicioniranje top ili bottom 50% ima razlicit efekat)
3) position: static ili relative - ancestorsContent (bez padding-a), najblizi block element roditelj

input[id*="terms"],
input[id*="terms"] + label {
	color: red;
}

font: inherit; - ne koristi default font na primer u input poljima formi nego uzme onaj koj si definisao

outline - kao border koristi se za fokus inpute

font-variant: small-caps; - sva capital slova samo mala i velika se razlikuju u velicini
font-stretch: ultra-condensed;

==================== CSS Flexbox ====================
display: flex; - flex container
flex-direction: row,column;
flex-wrap: wrap;
flex-flow: <'flex-direction'> || <'flex-wrap'>; - (shrothand)
justify-content: center, space-between - main axis
align-content: center; - cross axis, kada se smanji i predje u drugi red
align-items: center; cross axis

flex items
order: 0 je default, 1 bude poslednji
align-self: flex-start, flex-end, baseline, stretch....;
flex-grow: - ostatak prostora deli na brojilac i imenilac pa koliko mu frakcija zadas
flex-shrink: 1 je default, 0 nece da se smanji, 5 brze ce se smanjivati;
flex-basis: 300px, 10%, auto - koliko zauzima na main-axis-u u zavisnosti dal je row ili column uzima sirinu ili visinu
flex: <flex-grow> <flex-shrink> <flex-basis> - 0 1 auto; je default - (shrothand)

===================== CSS Grid ====================
display: grid;
grid-template-columns: 200px 150px 20% 1fr;
grid-template-columns: repeat(4, 1fr);
grid-template-rows: 5rem auto;
grid-template-rows: 5rem minmax(10px, auto);
grid-template-rows: [row-1-start] 5rem [row-1-end row-2-start] minmax(10px, auto) [row-2-end row-3-start] 100px [row-3-end]; - davanje imena linijama izmedju
grid-column-start: 3;
grid-column-end: 5;
grid-column-end: span 2; -koliko kolona da se prosiri
grid-column-end: -1; -pocne da broji od kraja pa zauzme ceo red
grid-row-start: 1;
grid-row-end: 3;

grid-column: 1 / -1; <grid-column-start> / <grid-column-end> (shrothand) mora da ide kosa crta izmedju
grid-row: row-2-start / span 1; <grid-row-start> / <grid-row-end> (shrothand)
grid-area: <grid-row-start> / <grid-column-start> / <grid-row-end> / <grid-column-end> - (shrothand)

grid-column-gap: 15px;
grid-row-gap: 10px;
grid-gap: <grid-row-gap> <grid-column-gap>; - (shrothand)


definisanje preko templatea
grid-template-areas: "header header header header"
                     "side side main main"
                     "footer footer . ."; - ovo ide u greed container, tacka znaci da ostavi prazno polje
grid-area: header; - ovo ide u dete grida

fit-content(8rem); - funkcija koja radi slicno kao minmax, stavlja minimalno 8rem pa kada treba vise onda sam povecava

justify-items: center, start, end; - u grid container-u ubacis svojstvo kako bi bili pozicionirani u centar a ne u vise kolona stretchovano
align-items: center, start, end;
pozicioniranje celog grida (korisno ako se nadje u nekom elementu grid)
justify-content: center, start, end; pozicionira ceo grid horizontalno
align-content: center, start, end; pozicionira ceo grid vertikalno

overwriting positioning from parent to a single element
justify-self: center, start, end;
align-self: center, start, end;

automatsko dodavanje redova ili kolona
grid-auto-rows: auto, 10rem, minmax(8rem, auto); - default velicina svakog sledeceg reda ako nisu definisani redovi je auto ali moze da se promeni u drugu velicinu
grid-auto-flow: row, column; - default je row, dodavanje automatskog sadrzaja na desno umesto u sledece redove
grid-auto-flow: row dense; - zauzimanje praznog prostora (npr galerija)
grid-auto-columns: 5rem;

auto-fill & auto-fit - automatsko stvaranje kolona za onoliko elemenata koliko moze da se vidi u viewportu
grid-template-columns: repeat(auto-fill, 10rem);
grid-template-columns: repeat(auto-fit, 10rem); - ovaj ih i centrira

transformacije
transform: rotateZ(45deg) translateX(10rem) translateY();
transform-origin: left top; - oko koje tacke ce se vrteti element
transform: skewY(20deg), skewX(10deg) ili skew(20deg, 10deg); vuce jednu stranicu nekoliko stepeni
transform: scaleX(2), scaleY(2), scale(2); - zumira sliku tj poveca je
transform: perspectiv(1000px) rotateX(70deg) rotateY(30deg); - perspective moze da ide na svaki element posebno ili kao property na roditelju pa vazi za sve elemente
perspective: 1000px;
perspective-origin: right, 500px; - perspektiva na konteneru sa koje strane gledamo sve

transition
transition: all
transition: opacity 0.2s ease-out 1s, transform 500ms ease-out 1s; - stavljaju se efekti koji se posmatraju i moze da ima 4 svojstva (koji property se tranzitira, koliko traje, efekat i delay)
transition: all 1s cubic-bezier(0.55,0.055,0.675,0.19); - kriva vremena kakvu hoces

animations
@keyframes wiggle {
    from {
        transform: rotateZ(0);
    }
    to {
        transform: rotateZ(10);
    }
}
animation: wiggle 200ms 3s 8 alternate,reverse,alternate-reverse,forwards,backwards,both; - koja animacija, koliko traje, delay, koliko se puta ponavlja i dal se vraca u prethodno stanje

@keyframes wiggle {
    0% {
        transform: rotateZ(0);
    }
    50% {
        transform: rotateZ(-10)
    }
    100% {
        transform: rotateZ(10);
    }
}

==================== CSS Variables ===================
definisanje varijable
:root {
    --zelenaBoja: green;
}

koriscenje varijable
div {
    background-color: var(--zelenaBoja, #333434); - koristi varijablu ako postoji a ako ne uzme zamensku boju
}


podrzavanje browsera support! ako ne podrzava ignorise to u zagradi
@supports (display: grid) {
    .container {
        display: grid;
    }
}

=================== Proof CSS Code ===================
polifills - nesto sto javaskriptom zamenjuje css stvari koje ne podrzavaju stariji browseri! treba se koristiti jako retko jer zesce smaraju! treba znati da postoje

normalizeri - nesto sto resetuje sve na nulu tj sva default podesavanja browsera kako bi onda mogao da definises stranicu da izgleda svuda ista ali da li ti to treba?

kako pravilno davati imena?
-css ne razume velika i mala slova tako da imena klasa i id-jeva se stavlja sa znakom minus (umesto pocetnaSekcija treba pocetna-sekcija)
-davati imena klasa id-eva i ostalog po funkcionalnosti a ne po izgledu (umesto crveni-naslov treba glavni-naslov)
Block Element Modifiers (BEM) - nacin imenovanja klasa (.BLOCK__ELEMENT--MODIFIER)

======================== SASS ========================
npm install -g sass
sass --watch input.scss output.css
sass --watch input.scss:output.css
sass --watch app/sass:public/stylesheets

$main-color: #521751;
$border-default: 0.05rem solid $main-color;

// MAPING - map of colors
$colors: (main: #521751, secondary: #fa923f);
$border-default: 0.05rem solid map-get($colors, main);

https://sass-lang.com/documentation/Sass/Script/Functions.html //pogledati na sajtu koje sve funkcije mogu da se koriste
background: lighten(map-get($colors, main), 72%);

//partials pocinju donjom crtom i inkluduju se u scss!!! nije lose imati vise inkludova kako bi se developing radio sa vise fajlova, a ucitavanje css-a bio samo jedan file, jer on sve te includove spoji u 1 css

// moze u sass-u @media query da se nestuju u obican kod
// Extend/Inheritance - moze da se nasledi deo koda sa @extend umesto da se dodaje na primer klasa u html-u
// mixins
@mixin display-flex() {
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@include display-flex();


@mixin media-min-width($width) {
  @media (min-width: $width) {
    @content;
  }
}
@include media-min-width(40rem){
  html{
    font-size: 125%;
  }
}

//pseudo selektori ili klase su POVEZANE a ne nestovane sa znakom &
.documentation-link{
    text-decoration: none;
    &:hover,
    &:active {
        color: white;
    }
}

sass loader moze da ide sa webpack-om

